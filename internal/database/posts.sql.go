// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (id, title, description, link, pub_date, feed_id)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (link) DO UPDATE -- always updates duplicated values 
SET title = EXCLUDED.title,
    description = EXCLUDED.description,
    pub_date = EXCLUDED.pub_date
`

type CreatePostParams struct {
	ID          uuid.UUID
	Title       string
	Description string
	Link        string
	PubDate     time.Time
	FeedID      uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Link,
		arg.PubDate,
		arg.FeedID,
	)
	return err
}

const getPostsByUserID = `-- name: GetPostsByUserID :many
SELECT title, description, link, pub_date
FROM posts
INNER JOIN feed_follows
ON feed_follows.feed_id = posts.feed_id
WHERE feed_follows.user_id = $1
ORDER BY pub_date DESC
LIMIT $2
`

type GetPostsByUserIDParams struct {
	UserID uuid.UUID
	Limit  int32
}

type GetPostsByUserIDRow struct {
	Title       string
	Description string
	Link        string
	PubDate     time.Time
}

func (q *Queries) GetPostsByUserID(ctx context.Context, arg GetPostsByUserIDParams) ([]GetPostsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserID, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserIDRow
	for rows.Next() {
		var i GetPostsByUserIDRow
		if err := rows.Scan(
			&i.Title,
			&i.Description,
			&i.Link,
			&i.PubDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
